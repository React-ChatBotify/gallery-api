name: Lint, Build & Publish
run-name: Lint, Build & Publish

permissions:
  contents: read
  actions: read

on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version to use"
        required: true
        type: string
      target_env:
        description: 'The deployment environment e.g. production or development'
        required: true
        type: string
      skip_deploy:
        description: 'Skip the deploy step (true/false)'
        required: true
        type: boolean

jobs:
  lint:
    name: Run Lint
    runs-on: ubuntu-latest
    environment: ${{ inputs.target_env }}

    steps:
      - name: Checkout code
        # Checks out the repository code.
        uses: actions/checkout@v4

      - name: Setup Node.js (Latest)
        # Sets up NodeJS environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Dependencies
        # Installs dependencies
        run: npm ci

      - name: Run Linter
        # Runs lint checks
        run: npm run lint

  build:
    needs: lint
    name: Build Docker Images
    runs-on: ubuntu-latest
    environment: ${{ inputs.target_env }}
    outputs:
      # Exposes the TARGET_TAG output from the 'vars' step.
      target_tag: ${{ steps.vars.outputs.TARGET_TAG }}

    steps:
      - name: Checkout code
        # Checks out the repository code.
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        # Prepares Docker Buildx for building multi-platform images.
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        # Logs into GitHub Container Registry using provided credentials.
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.MACHINE_USER }}
          password: ${{ secrets.MACHINE_PAT }}
      
      - name: Determine deployment variables
        id: vars
        # Sets Docker image tags for production or development based on branch name.
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "TARGET_TAG=prod-latest" >> $GITHUB_OUTPUT
            echo "BACKUP_TAG=prod-previous" >> $GITHUB_OUTPUT
          elif [ "$BRANCH_NAME" = "development" ]; then
            echo "TARGET_TAG=dev-latest" >> $GITHUB_OUTPUT
            echo "BACKUP_TAG=dev-previous" >> $GITHUB_OUTPUT
          else
            echo "Unsupported branch: $BRANCH_NAME"
            exit 1
          fi

      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - 'src/api/**'
            jobs:
              - 'src/jobs/**'

      - name: Backup existing API image
        # Pulls the current image using the target tag and backup it with a previous tag if it exists.
        if: steps.changes.outputs.api == 'true'
        run: |
          OWNER="${{ github.repository_owner }}"
          BASE="${{ github.event.repository.name }}-api"
          IMAGE="ghcr.io/$OWNER/$BASE:${{ steps.vars.outputs.TARGET_TAG }}"
          BACKUP="ghcr.io/$OWNER/$BASE:${{ steps.vars.outputs.BACKUP_TAG }}"
          echo "Backing up API image if it exists: $IMAGE → $BACKUP"
          if docker pull "$IMAGE"; then
            docker tag "$IMAGE" "$BACKUP"
            docker push "$BACKUP"
          else
            echo "No API image to back up."
          fi

      - name: Backup existing Jobs image
        # Pulls the current image using the target tag and backup it with a previous tag if it exists.
        if: steps.changes.outputs.jobs == 'true'
        run: |
          OWNER="${{ github.repository_owner }}"
          BASE="${{ github.event.repository.name }}-jobs"
          IMAGE="ghcr.io/$OWNER/$BASE:${{ steps.vars.outputs.TARGET_TAG }}"
          BACKUP="ghcr.io/$OWNER/$BASE:${{ steps.vars.outputs.BACKUP_TAG }}"
          echo "Backing up Jobs image if it exists: $IMAGE → $BACKUP"
          if docker pull "$IMAGE"; then
            docker tag "$IMAGE" "$BACKUP"
            docker push "$BACKUP"
          else
            echo "No Jobs image to back up."
          fi

      - name: Cleanup Old API Image Digests
        # Cleans up old api images
        if: steps.changes.outputs.api == 'true'
        uses: actions/delete-package-versions@v5
        continue-on-error: true
        with:
          package-name: ${{ github.event.repository.name }}-api
          package-type: container
          owner: ${{ github.repository_owner }}
          min-versions-to-keep: 2 # Keeps the 2 most recent versions (latest and previous)
          token: ${{ secrets.MACHINE_PAT }}

      - name: Cleanup Old Jobs Image Digests
        # Cleans up old jobs images
        if: steps.changes.outputs.jobs == 'true'
        uses: actions/delete-package-versions@v5
        continue-on-error: true
        with:
          package-name: ${{ github.event.repository.name }}-jobs
          package-type: container
          owner: ${{ github.repository_owner }}
          min-versions-to-keep: 2 # Keeps the 2 most recent versions (latest and previous)
          token: ${{ secrets.MACHINE_PAT }}

      - name: Build & push API image
        # Builds a new Docker image with the target tag and pushes it to GHCR.
        if: steps.changes.outputs.api == 'true'
        run: |
          OWNER=${{ github.repository_owner }}
          BASE=${{ github.event.repository.name }}-api
          TAG=${{ steps.vars.outputs.TARGET_TAG }}
          IMAGE=ghcr.io/$OWNER/$BASE:$TAG

          echo "Building image with tag $IMAGE"

          docker build \
            --file docker/api/Dockerfile \
            --tag $IMAGE \
            src/api

          docker push $IMAGE

      - name: Build & push Jobs image
        # Builds a new Docker image with the target tag and pushes it to GHCR.
        if: steps.changes.outputs.jobs == 'true'
        run: |
          OWNER=${{ github.repository_owner }}
          BASE=${{ github.event.repository.name }}-jobs
          TAG=${{ steps.vars.outputs.TARGET_TAG }}
          IMAGE=ghcr.io/$OWNER/$BASE:$TAG

          echo "Building image with tag $IMAGE"

          docker build \
            --file docker/jobs/Dockerfile \
            --tag $IMAGE \
            src/jobs

          docker push $IMAGE

  trigger-deploy:
    needs: build
    name: Deploy
    if: ${{ inputs.skip_deploy == false }}
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      target_env: ${{ inputs.target_env }}
      target_tag: ${{ needs.build.outputs.target_tag }}