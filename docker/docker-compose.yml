# The production environment runs the live application for public use. Debugging outputs are minimized and
# the application runs with stricter configurations.
services:
  # first instance of the api server
  api1:
    container_name: api-1
    env_file:
      - ../config/env/.env
    environment:
      - PORT=3200
      - NODE_ENV=local
      - IS_PRIMARY=true
    depends_on:
      redis-sessions:
        condition: service_healthy
      redis-ephemeral:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - nginx-network
      - core-network

  # second instance of the api server
  api2:
    container_name: api-2
    env_file:
      - ../config/env/.env
    environment:
      - PORT=3201
      - NODE_ENV=local
    depends_on:
      redis-sessions:
        condition: service_healthy
      redis-ephemeral:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - nginx-network
      - core-network

  # runs scheduled jobs on the platform
  jobs:
    container_name: jobs
    env_file:
      - ../config/env/.env
    depends_on:
      mysql:
        condition: service_healthy
      api1:
        condition: service_started
      api2:
        condition: service_started
    networks:
      - core-network

  # used in user sessions and secure storage of user data/tokens
  redis-sessions:
    container_name: redis-sessions
    image: redis:latest
    env_file:
      - ../config/env/.env
    networks:
      - core-network
    volumes:
      - redis-sessions-data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    healthcheck:
      test: "exit 0"

  redis-ephemeral:
    container_name: redis-ephemeral
    image: redis:latest
    env_file:
      - ../config/env/.env
    networks:
      - core-network
    healthcheck:
      test: "exit 0"

  # used to persist user/themes data
  mysql:
    container_name: mysql
    image: mysql:latest
    env_file:
      - ../config/env/.env
    networks:
      - core-network
    volumes:
      - mysql-data:/var/lib/mysql
    # todo: is this check good enough?
    healthcheck:
      test: "exit 0"

  # used for temporarily holding uploaded theme files
  minio:
    container_name: minio
    image: minio/minio
    env_file:
      - ../config/env/.env
    command: ['server', '--console-address', ':9001', '/data']
    volumes:
      - minio-data:/data
    networks:
      - core-network
    ports:
      - '9001:9001'
      - '9000:9000'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # used to load balance between api server instances
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "3100:3100"
    volumes:
      - ../config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    networks:
      - nginx-network

# todo: redis seems to create ghost volumes on every restart even with data specified, why?
volumes:
  mysql-data:
  minio-data:
  redis-sessions-data:


networks:
  nginx-network:
    driver: bridge
  core-network:
    driver: bridge
