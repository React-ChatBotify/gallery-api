# The playground environment is intended for frontend developers to easily test their changes
# against a hosted backend environment. The playground uses the Dockerfile for production to
# closely mirror the live environment, but uses its own set of environment variables.
services:
  # first instance of the api server
  api1:
    container_name: api-playground-1
    build:
      context: ..
      dockerfile: ./docker/api/Dockerfile
    env_file:
      - ../config/env/.env.playground
    environment:
      - PORT=3200
      - NODE_ENV=playground
      - IS_PRIMARY=true
    depends_on:
      redis-sessions:
        condition: service_healthy
      redis-ephemeral:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - nginx-network-playground
      - core-network-playground

  # second instance of the api server
  api2:
    container_name: api-playground-2
    build:
      context: ..
      dockerfile: ./docker/api/Dockerfile
    env_file:
      - ../config/env/.env.playground
    environment:
      - PORT=3201
      - NODE_ENV=playground
    depends_on:
      redis-sessions:
        condition: service_healthy
      redis-ephemeral:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - nginx-network-playground
      - core-network-playground

  # runs scheduled jobs on the platform
  jobs:
    container_name: jobs-playground
    build:
      context: ..
      dockerfile: ./docker/jobs/Dockerfile
    env_file:
      - ../config/env/.env.playground
    depends_on:
      mysql:
        condition: service_healthy
      api1:
        condition: service_started
      api2:
        condition: service_started
    networks:
      - core-network-playground

  # used in user sessions and secure storage of user data/tokens
  redis-sessions:
    container_name: redis-sessions-playground
    image: redis:latest
    env_file:
      - ../config/env/.env.playground
    networks:
      - core-network-playground
    volumes:
      - redis-sessions-data-playground:/data
      - ./config/redis/redis.playground.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: "exit 0"

  redis-ephemeral:
    container_name: redis-ephemeral-playground
    image: redis:latest
    env_file:
      - ../config/env/.env.playground
    networks:
      - core-network-playground
    healthcheck:
      test: "exit 0"

  # used to persist user/themes data
  mysql:
    container_name: mysql-playground
    image: mysql:latest
    env_file:
      - ../config/env/.env.playground
    networks:
      - core-network-playground
    volumes:
      - mysql-data-playground:/var/lib/mysql
    # todo: is this check good enough?
    healthcheck:
      test: "exit 0"

  # used for temporarily holding uploaded theme files
  minio:
    container_name: minio-playground
    image: minio/minio
    env_file:
      - ../config/env/.env.playground
    command: server /data
    volumes:
      - minio-data-playground:/data
    networks:
      - core-network-playground
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # used to load balance between api server instances
  nginx:
    image: nginx:latest
    container_name: nginx-playground
    ports:
      - "3101:3100"
    volumes:
      - ../config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    networks:
      - nginx-network-playground

# todo: redis seems to create ghost volumes on every restart even with data specified, why?
volumes:
  mysql-data-playground:
  minio-data-playground:
  redis-sessions-data-playground:

networks:
  nginx-network-playground:
    driver: bridge
  core-network-playground:
    driver: bridge
